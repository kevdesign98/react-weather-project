className === classe css ---> il nome della classe posso metterci il trattino;
className="lorem-ipsum"

class === classe js;

id posso usarlo tranquillamente;




frammenti === <></> vanno dentro al return altrimenti non funziona una sega;

le parentesi graffe servono ad infilare valori javascript e non html
doppie parentesi graffe servono per gli oggetti stile in linea
una parentesi graffa ci infilo la const con i valori

className={`rounded-lg w-72 h-72 ${x < 10 ? "bg-red-500 rotate-45" : "bg-sky-500"}`}>x è {x}

props componenti === cose dinamiche ---> è come chiamare una parte di un oggetto ---> props.title ecc
diversi metodi per chiamarli :
metterlo all'inizio dentro la funzione --> function Card(props){const title = props.title}
oppure mettere ({title, imgURL}) le const dentro le graffe

Rendering Condizionale ---> if
si usa il ternary operator oppure anche l'operator and --> &&
! ---> not ---> Converte l’operando a booleano: true/false

Rendering list si fa con map e filter e il props key
prop key === id array/obj sono id univoci

preventDefault ---> previene er default non ricarica la pagina quando pigi su un bottone

state-----> const array = useState(0) ----> const [array] = useState(0) 

interface si usa in TS --->da li possiamo far passare i dati dai props

useEffect  ---> si usa co le API

chiamate http ----> endpoint è l'URL
per cancellare un post/elemento ---> method:'DELETE'
per aggiungere ----> method:'POST'


useReducer  ----> gestire lo stato dei componenti ---> NON HO CAPITO NULLA

Context API ------>

Redux ----->libreria per la gestione dello stato
slice ----> singole parti di uno stato
reducer ---> gestisce il cambio dello stato con despatch
useSelector ----> fa riferimento a uno state in particolare, per leggere  lo stato
useDispatch ----> per modificare lo stato

hooks--->sono questi useEffect, useState, useSelector ecc c'è sempre use davanti
custom hooks ----->



USE STATE:
QUANDO è 0 SI USA PER I COUNT E ROBE SIMILI,
QUANDO è UN ARRAY SI USA PER UNA LISTA DI COSE TIPO "COSA", "SASSO", "MASSO", ECC.
QUANDO è UN OGGETTO SI USA PER GLI USER E PROPS ECC.
QUANDO è "" SI USA PER DIRE CHE è VUOTO
QUANDO è FALSE SI USA PER GESTIRE UN BOOLEANO


USE EFFECT: 
useEffect(() => {
  // codice da eseguire quando è attivato l'effetto
}, [dependencies]);

SI PUò ANCHE ---> Recuperare i dati da un’API esterna

useEffect(() => {
  // Recupera i dati da un'API esterna
  fetch('https://api.example.com/data')
	.then((response) => response.json())
	.then((data) => {
  	// Fa qualcosa con i dati
	});
}, []);

await ---> async function wait for a promise
async ---> funzione ritorna una promise
promise ----> un oggetto che gestisce le operazioni di asynch

let promise = new Promise(function(resolve, reject) {
	//code
});

resolve == value,
reject == error,
    Pending (in attesa): stato iniziale, prima che la Promise abbia successo o fallisca
    Resolved (risolta): Promise completata
    ---> l metodo then() viene chiamato dopo che la Promise è risolta

    Rejected (rifiutata): Promise fallita
    ---> se la Promise viene rifiutata, salteremo al metodo catch()




    TYPESCRIPT

    bisogna sempre specificare il tipo di dati/variabili e dopo scrivere tutti i valori del casso
    interface è molto meglio di types
    interface ----> utilizzate per definire la struttura degli oggetti, assicurandosi che abbiano un determinato insieme di proprietà o metodi.
    <T> ---> parametro

    